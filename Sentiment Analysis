{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["## This file contains the pre-processing for all of the different models that we will be using."],"metadata":{"id":"L0P814IGonjl"}},{"cell_type":"code","source":["#%pip install textblob"],"metadata":{"id":"8ZuhPWAa9Zje","executionInfo":{"status":"ok","timestamp":1680471743301,"user_tz":-120,"elapsed":5,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"id":"c9Ig9HV-oklu","colab":{"base_uri":"https://localhost:8080/","height":173},"executionInfo":{"status":"ok","timestamp":1680471745487,"user_tz":-120,"elapsed":2189,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"1361c0a0-650a-4d60-bfe6-2d31184266a7"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\nHOW MUCH DO SHOULD WE CUT OUT?? ---> 300.000 \\nIn case that takes too long to run use BERT (check chat gpt history)\\nSplitting on the sentence  → makes the assumption that the sentences are grammatically correct → use PunktSentenceTokanizer() (because it is unsupervised learning it will be able to learn how to handle the grammatical errors)\\nDownload stopwords and wordnet from nltk \\nTokenize each sentence \\nRemove stopwords\\nLemataise words in each sentence\\nBut the words back into the sentence again \\nFigure out how to put each sentence in a row and add sentence id for each sentence \\nExploratory data analysis: keep rating \\nLook at the vader output-to-label function from lab sess 3\\nCross Validation:\\nTo check if the the labelling did well: compare textblob vader labelling\\nLook in Mylene’s chat gpt history to know which labels we need to kick out\\nManually check 50 rows in order to have something to talk about on the poster\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}],"source":["import pandas as pd\n","import nltk\n","from textblob import TextBlob\n","from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","nltk.download('punkt')\n","\n","# plan:\n","# 1. read the file into pandas dataframe \n","# 2. seperate the review texts into sentences\n","\n","\"\"\"\n","HOW MUCH DO SHOULD WE CUT OUT?? ---> 300.000 \n","In case that takes too long to run use BERT (check chat gpt history)\n","Splitting on the sentence  → makes the assumption that the sentences are grammatically correct → use PunktSentenceTokanizer() (because it is unsupervised learning it will be able to learn how to handle the grammatical errors)\n","Download stopwords and wordnet from nltk \n","Tokenize each sentence \n","Remove stopwords\n","Lemataise words in each sentence\n","But the words back into the sentence again \n","Figure out how to put each sentence in a row and add sentence id for each sentence \n","Exploratory data analysis: keep rating \n","Look at the vader output-to-label function from lab sess 3\n","Cross Validation:\n","To check if the the labelling did well: compare textblob vader labelling\n","Look in Mylene’s chat gpt history to know which labels we need to kick out\n","Manually check 50 rows in order to have something to talk about on the poster\n","\"\"\""]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"916nO8SbBeSw","executionInfo":{"status":"ok","timestamp":1680471768225,"user_tz":-120,"elapsed":22745,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"19feb9ef-b9cd-4d50-a12c-133b8c826fe1"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["train_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/datasets/train.csv', names = ['Rating', 'Title', 'Text'])"],"metadata":{"id":"y0l2hPBYBTgb","executionInfo":{"status":"ok","timestamp":1680471791727,"user_tz":-120,"elapsed":23507,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["train_df = train_df[:10000]\n","display(train_df['Text'])"],"metadata":{"id":"kQA3zMjdCG7f","executionInfo":{"status":"ok","timestamp":1680471791727,"user_tz":-120,"elapsed":14,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"8847894e-e009-4cc6-f6b7-34510bdee0da"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["0       Gave this to my dad for a gag gift after direc...\n","1       I hope a lot of people hear this cd. We need m...\n","2       I'm reading a lot of reviews saying that this ...\n","3       The music of Yasunori Misuda is without questi...\n","4       Probably the greatest soundtrack in history! U...\n","                              ...                        \n","9995    We selected this product for my daughter becau...\n","9996    Installation took several hours and was frustr...\n","9997    The dual tuner feature won't work on this mode...\n","9998    Tivo worked for two weeks using the tivo wirel...\n","9999    I gave this to my wife for Christmas and now w...\n","Name: Text, Length: 10000, dtype: object"]},"metadata":{}}]},{"cell_type":"markdown","source":["## Pre-Processing"],"metadata":{"id":"94lHFIYocrXo"}},{"cell_type":"code","source":["# uses an unsupervised learning algorithm to learn the sentence boundary detection rules.\n","tokenizer = nltk.tokenize.punkt.PunktSentenceTokenizer()"],"metadata":{"id":"2U1U7EXWW-rN","executionInfo":{"status":"ok","timestamp":1680471791728,"user_tz":-120,"elapsed":8,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["train_df['Text'] = train_df['Text'].apply(lambda x: tokenizer.tokenize(x))"],"metadata":{"id":"qqqCwx10CrI7","executionInfo":{"status":"ok","timestamp":1680471793160,"user_tz":-120,"elapsed":1439,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# explode the sentences column into rows\n","new_train_df = train_df.explode('Text')"],"metadata":{"id":"0KAe8fl-NZCD","executionInfo":{"status":"ok","timestamp":1680471793160,"user_tz":-120,"elapsed":13,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# assign ids to each row using enumerate\n","new_train_df['sentence id'] = [i+1 for i in range(len(new_train_df))]\n","# move the sentence id to be the first column\n","id_col = new_train_df.pop('sentence id')\n","new_train_df.insert(0, 'sentence id', id_col)"],"metadata":{"id":"wZV8HLJ1YWRY","executionInfo":{"status":"ok","timestamp":1680471793160,"user_tz":-120,"elapsed":11,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["new_train_df = new_train_df.drop('Title', axis=1)"],"metadata":{"id":"PsEv6VwKZ_O4","executionInfo":{"status":"ok","timestamp":1680471793161,"user_tz":-120,"elapsed":12,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["new_train_df = new_train_df.drop('Rating', axis=1)"],"metadata":{"id":"fPUg2KjGckZC","executionInfo":{"status":"ok","timestamp":1680471793161,"user_tz":-120,"elapsed":11,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["new_train_df = new_train_df.dropna()"],"metadata":{"id":"NLhAdOrnksDQ","executionInfo":{"status":"ok","timestamp":1680471793161,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def has_short_words(s):\n","    return all(len(word) >= 3 for word in s.split())\n","\n","# Apply the function to the 'text' column of the dataframe\n","new_train_df = new_train_df[new_train_df['Text'].apply(lambda x: has_short_words(x))]"],"metadata":{"id":"rEIqvcugyhZ1","executionInfo":{"status":"ok","timestamp":1680471793162,"user_tz":-120,"elapsed":11,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["import re\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem import WordNetLemmatizer"],"metadata":{"id":"MD2ll-VpdPNc","executionInfo":{"status":"ok","timestamp":1680471793162,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# convert all sentences into lowercase\n","new_train_df['Text'] = new_train_df['Text'].apply(lambda x: re.sub(r'[^\\w\\s]', '', x.lower()))"],"metadata":{"id":"OHU75gOWbMBN","executionInfo":{"status":"ok","timestamp":1680471793162,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["nltk.download('stopwords')"],"metadata":{"id":"sJXkrwzXd10T","executionInfo":{"status":"ok","timestamp":1680471793162,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8cf71a6c-9027-4897-fe87-803130339e96"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["nltk.download('wordnet')"],"metadata":{"id":"lwLsyF6KfBGn","executionInfo":{"status":"ok","timestamp":1680471793163,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ad07f56f-6123-4a14-cab1-cf9f2d00081d"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# remove all stopwords\n","# define the stop words\n","stop_words = set(stopwords.words('english'))\n","\n","# apply stop word removal to the 'text' column\n","new_train_df['Text'] = new_train_df['Text'].apply(lambda x: ' '.join([word for word in word_tokenize(x) if word.lower() not in stop_words]))\n","\n","lemmatizer = WordNetLemmatizer()\n","\n","# lemmatising all words \n","new_train_df['Text'] = new_train_df['Text'].apply(lambda x: ' '.join([lemmatizer.lemmatize(word) for word in word_tokenize(x)]))\n"],"metadata":{"id":"pPQjlZZqdfSI","executionInfo":{"status":"ok","timestamp":1680471795577,"user_tz":-120,"elapsed":2420,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["display(new_train_df)"],"metadata":{"id":"Bq5BPh3Hd4A4","executionInfo":{"status":"ok","timestamp":1680471795578,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"colab":{"base_uri":"https://localhost:8080/","height":419},"outputId":"d80cb729-9f00-4ac9-d05f-d8c4ededfe4f"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["      sentence id                                               Text\n","1               4     great vocal fresh tune crosscultural happiness\n","1               6                            pop sound catchy mature\n","4              16                                            get ost\n","4              17                                            amazing\n","6              31                                 haddon never heard\n","...           ...                                                ...\n","9996        46938                    clear instruction would helpful\n","9996        46940  different term used interchangeably instructio...\n","9997        46945                                           dont buy\n","9998        46946   tivo worked two week using tivo wireless adapter\n","9999        46954                                  byebye commercial\n","\n","[4772 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-8aa93967-aa42-47e3-9067-c36e2cf138fc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sentence id</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>great vocal fresh tune crosscultural happiness</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6</td>\n","      <td>pop sound catchy mature</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>16</td>\n","      <td>get ost</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17</td>\n","      <td>amazing</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>haddon never heard</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46938</td>\n","      <td>clear instruction would helpful</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46940</td>\n","      <td>different term used interchangeably instructio...</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>46945</td>\n","      <td>dont buy</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>46946</td>\n","      <td>tivo worked two week using tivo wireless adapter</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>46954</td>\n","      <td>byebye commercial</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4772 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8aa93967-aa42-47e3-9067-c36e2cf138fc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8aa93967-aa42-47e3-9067-c36e2cf138fc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8aa93967-aa42-47e3-9067-c36e2cf138fc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"markdown","source":["## Labelling "],"metadata":{"id":"dPZ2_3QVft2t"}},{"cell_type":"code","source":["from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","from textblob import TextBlob\n","nltk.download('vader_lexicon')\n","# Initialize the VADER sentiment analyzer\n","analyzer = SentimentIntensityAnalyzer()\n"],"metadata":{"id":"-Lnr4NzVfv10","executionInfo":{"status":"ok","timestamp":1680471795578,"user_tz":-120,"elapsed":9,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"942a7335-617f-4ae0-d5ff-b2d65e435df6"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"]}]},{"cell_type":"code","source":["def get_label(score):\n","    if score > 0.05:\n","        return 'positive'\n","    elif score < -0.05:\n","        return 'negative'\n","    else:\n","        return 'neutral'\n","\n","def get_label_blob(polarity):\n","    if polarity > 0.0:\n","        return 'positive'\n","    elif polarity < 0.0:\n","        return 'negative'\n","    else:\n","        return 'neutral'\n","\n","def check_sentiment(vader_score, polarity):\n","  if abs(polarity - vader_score) < 0.2:\n","    # Sentiment analysis is consistent between TextBlob and VADER\n","    return get_label(vader_score)\n","  else:\n","      # Sentiment analysis is inconsistent between TextBlob and VADER\n","      inconsistency_val = abs(polarity - vader_score)\n","      return \"Sentiment analysis mismatch {}\".format(inconsistency_val)\n","\n","\n","def get_vader_sent(sentence):\n","  scores = analyzer.polarity_scores(sentence)\n","  vader_score = scores['compound']\n","  return get_label(vader_score)\n","\n","def get_sentiment(sentence):\n","  scores = analyzer.polarity_scores(sentence)\n","  vader_score = scores['compound']\n","  blob = TextBlob(sentence)\n","  polarity, subjectivity = blob.sentiment\n","  return check_sentiment(vader_score, polarity)\n","\n","def get_sentiment_blob(sentence):\n","  blob = TextBlob(sentence)\n","  polarity, subjectivity = blob.sentiment\n","  return get_label_blob(polarity)\n","  "],"metadata":{"id":"nDjmCKgQhZtd","executionInfo":{"status":"ok","timestamp":1680471795578,"user_tz":-120,"elapsed":5,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["new_train_df['VADER Sentiment'] = new_train_df['Text'].apply(lambda x: get_vader_sent(x))"],"metadata":{"id":"j2IKQKdxj16g","executionInfo":{"status":"ok","timestamp":1680471795578,"user_tz":-120,"elapsed":4,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["new_train_df['Auto Cross-Validated Sentiment'] = new_train_df['Text'].apply(lambda x: get_sentiment(x))"],"metadata":{"id":"h6sGWwpdgXDh","executionInfo":{"status":"ok","timestamp":1680471796341,"user_tz":-120,"elapsed":767,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["new_train_df['TextBlob Sentiment'] = new_train_df['Text'].apply(lambda x: get_sentiment_blob(x))"],"metadata":{"id":"h5IOgEVEn-DT","executionInfo":{"status":"ok","timestamp":1680471796957,"user_tz":-120,"elapsed":620,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["display(new_train_df)"],"metadata":{"id":"8ft9H0w4j2LJ","executionInfo":{"status":"ok","timestamp":1680471796957,"user_tz":-120,"elapsed":17,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"colab":{"base_uri":"https://localhost:8080/","height":419},"outputId":"7f42d0eb-d7e1-4275-dbdd-ae4d6e49b33e"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["      sentence id                                               Text  \\\n","1               4     great vocal fresh tune crosscultural happiness   \n","1               6                            pop sound catchy mature   \n","4              16                                            get ost   \n","4              17                                            amazing   \n","6              31                                 haddon never heard   \n","...           ...                                                ...   \n","9996        46938                    clear instruction would helpful   \n","9996        46940  different term used interchangeably instructio...   \n","9997        46945                                           dont buy   \n","9998        46946   tivo worked two week using tivo wireless adapter   \n","9999        46954                                  byebye commercial   \n","\n","     VADER Sentiment      Auto Cross-Validated Sentiment TextBlob Sentiment  \n","1           positive   Sentiment analysis mismatch 0.275           positive  \n","1           positive                            positive           positive  \n","4            neutral                             neutral            neutral  \n","4           positive                            positive           positive  \n","6            neutral                             neutral            neutral  \n","...              ...                                 ...                ...  \n","9996        positive  Sentiment analysis mismatch 0.5597           positive  \n","9996         neutral                             neutral           positive  \n","9997         neutral                             neutral            neutral  \n","9998         neutral                             neutral            neutral  \n","9999         neutral                             neutral            neutral  \n","\n","[4772 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-7aa3fc19-9647-4d80-bc34-21a7d3b2346e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sentence id</th>\n","      <th>Text</th>\n","      <th>VADER Sentiment</th>\n","      <th>Auto Cross-Validated Sentiment</th>\n","      <th>TextBlob Sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>great vocal fresh tune crosscultural happiness</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.275</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6</td>\n","      <td>pop sound catchy mature</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>16</td>\n","      <td>get ost</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17</td>\n","      <td>amazing</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>haddon never heard</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46938</td>\n","      <td>clear instruction would helpful</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.5597</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46940</td>\n","      <td>different term used interchangeably instructio...</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>46945</td>\n","      <td>dont buy</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>46946</td>\n","      <td>tivo worked two week using tivo wireless adapter</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>46954</td>\n","      <td>byebye commercial</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4772 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7aa3fc19-9647-4d80-bc34-21a7d3b2346e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7aa3fc19-9647-4d80-bc34-21a7d3b2346e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7aa3fc19-9647-4d80-bc34-21a7d3b2346e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"markdown","source":["## Exploratory Data Analysis"],"metadata":{"id":"wbTulN2JlbX2"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","mismatch_count = new_train_df['Auto Cross-Validated Sentiment'].str.contains('Sentiment analysis mismatch ').sum()\n","mismatch_data = new_train_df[new_train_df['Auto Cross-Validated Sentiment'].str.contains('Sentiment analysis mismatch')]\n","sentiments = ['positive', 'negative', 'neutral']\n","validated_count = new_train_df['Auto Cross-Validated Sentiment'].isin(sentiments).sum()\n"],"metadata":{"id":"oZnIvZ-ulfFU","executionInfo":{"status":"ok","timestamp":1680471796957,"user_tz":-120,"elapsed":15,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["validated_data = new_train_df[~new_train_df['Auto Cross-Validated Sentiment'].str.contains('Sentiment analysis mismatch')]\n","display(validated_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"S-mr1gLoXk9k","executionInfo":{"status":"ok","timestamp":1680471796958,"user_tz":-120,"elapsed":16,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"64aae9f8-6b41-4027-c209-4a866684ec6b"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["      sentence id                                               Text  \\\n","1               6                            pop sound catchy mature   \n","4              16                                            get ost   \n","4              17                                            amazing   \n","6              31                                 haddon never heard   \n","9              46                                      others beware   \n","...           ...                                                ...   \n","9992        46913                                               ouch   \n","9996        46940  different term used interchangeably instructio...   \n","9997        46945                                           dont buy   \n","9998        46946   tivo worked two week using tivo wireless adapter   \n","9999        46954                                  byebye commercial   \n","\n","     VADER Sentiment Auto Cross-Validated Sentiment TextBlob Sentiment  \n","1           positive                       positive           positive  \n","4            neutral                        neutral            neutral  \n","4           positive                       positive           positive  \n","6            neutral                        neutral            neutral  \n","9            neutral                        neutral            neutral  \n","...              ...                            ...                ...  \n","9992         neutral                        neutral            neutral  \n","9996         neutral                        neutral           positive  \n","9997         neutral                        neutral            neutral  \n","9998         neutral                        neutral            neutral  \n","9999         neutral                        neutral            neutral  \n","\n","[2820 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-34683f07-01ea-40f5-8104-78ddbbbfb572\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sentence id</th>\n","      <th>Text</th>\n","      <th>VADER Sentiment</th>\n","      <th>Auto Cross-Validated Sentiment</th>\n","      <th>TextBlob Sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>6</td>\n","      <td>pop sound catchy mature</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>16</td>\n","      <td>get ost</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17</td>\n","      <td>amazing</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>31</td>\n","      <td>haddon never heard</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>46</td>\n","      <td>others beware</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9992</th>\n","      <td>46913</td>\n","      <td>ouch</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46940</td>\n","      <td>different term used interchangeably instructio...</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>46945</td>\n","      <td>dont buy</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>46946</td>\n","      <td>tivo worked two week using tivo wireless adapter</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>46954</td>\n","      <td>byebye commercial</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","      <td>neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2820 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34683f07-01ea-40f5-8104-78ddbbbfb572')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-34683f07-01ea-40f5-8104-78ddbbbfb572 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-34683f07-01ea-40f5-8104-78ddbbbfb572');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["# count the number of occurrences of each value in the validated data\n","value_counts = validated_data['Auto Cross-Validated Sentiment'].value_counts()\n","\n","# plot the pie chart\n","#value_counts.plot(kind='pie', autopct='%1.1f%%')\n","\n","display(validated_data['Auto Cross-Validated Sentiment'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":221},"id":"IP3Pi1_f-z6n","outputId":"f694884b-1a42-470c-9bdc-37614482845a","executionInfo":{"status":"ok","timestamp":1680471796958,"user_tz":-120,"elapsed":14,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["1       positive\n","4        neutral\n","4       positive\n","6        neutral\n","9        neutral\n","          ...   \n","9992     neutral\n","9996     neutral\n","9997     neutral\n","9998     neutral\n","9999     neutral\n","Name: Auto Cross-Validated Sentiment, Length: 2820, dtype: object"]},"metadata":{}}]},{"cell_type":"code","source":["plt.pie(value_counts, labels=value_counts.index, autopct='%1.1f%%')\n","plt.title('Sentiment Distribution')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"gr2XNKmyYh06","executionInfo":{"status":"ok","timestamp":1680471796958,"user_tz":-120,"elapsed":13,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"7f62df08-d12c-4370-d3d1-fe1277b07f2a"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["type(mismatch_count)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wXLrPm4adohG","executionInfo":{"status":"ok","timestamp":1680471796958,"user_tz":-120,"elapsed":12,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"93fe7d10-469e-4ffa-d4a6-94aeebfd8589"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.int64"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["plt.bar(['mismatch_count', 'validated_count'], [mismatch_count, validated_count])\n","\n","# Add labels and title\n","plt.xlabel('Datasets')\n","plt.ylabel('Counts')\n","plt.title('Counts of Datasets')\n","\n","# Show the plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"JIc8lJ_GdutK","executionInfo":{"status":"ok","timestamp":1680471798685,"user_tz":-120,"elapsed":1735,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"32ea6424-31f0-4896-bd12-9413c67ac809"},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from wordcloud import WordCloud\n","\n","wordcloud = WordCloud(background_color='white', max_words=1000, contour_width=3, contour_color='steeleblue')\n","\n","clustered_reviews_train = ','.join(list(validated_data['Text'].values))\n","wordcloud.generate(clustered_reviews_train)\n","wordcloud.to_image()"],"metadata":{"id":"k59__TUby_tA","colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"status":"ok","timestamp":1680471798685,"user_tz":-120,"elapsed":22,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"d139e6e2-ab58-4641-b1bd-6e52db59a5b5"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=400x200 at 0x7F01DE76C220>"],"image/png":"\n"},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["## Silver Label Selection"],"metadata":{"id":"GDbgdmRtfyfn"}},{"cell_type":"code","source":["from statsmodels.stats.power import tt_ind_solve_power\n","\n","effect_size = 0.5  # desired effect size\n","alpha = 0.05  # significance level\n","power = 0.8  # desired power\n","\n","sample_size = tt_ind_solve_power(effect_size, alpha=alpha, power=power)\n","print(\"Sample size required:\", sample_size)"],"metadata":{"id":"ZDrC0gTHjANt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680471798685,"user_tz":-120,"elapsed":18,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"bd0f46ad-4cdc-44e8-9474-d9d0e0afe738"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Sample size required: 63.765610587854056\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/scipy/stats/_continuous_distns.py:6832: RuntimeWarning: invalid value encountered in _nct_sf\n","  return np.clip(_boost._nct_sf(x, df, nc), 0, 1)\n","/usr/local/lib/python3.9/dist-packages/scipy/stats/_continuous_distns.py:6826: RuntimeWarning: invalid value encountered in _nct_cdf\n","  return np.clip(_boost._nct_cdf(x, df, nc), 0, 1)\n"]}]},{"cell_type":"code","source":["#random_sample = validated_data.sample(n=int(sample_size))"],"metadata":{"id":"L6S0OdiFpPcR","executionInfo":{"status":"ok","timestamp":1680471798685,"user_tz":-120,"elapsed":13,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["# Tara should start labelling here"],"metadata":{"id":"qUXh9ts7pbUN"}},{"cell_type":"code","source":["#random_sample = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/datasets/sample.csv')"],"metadata":{"id":"KbkxO3Czpe50","executionInfo":{"status":"ok","timestamp":1680471798686,"user_tz":-120,"elapsed":14,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["#manual_labels = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/datasets/sample_labelled.xlsx')\n"],"metadata":{"id":"9V6eVE9wprhO","executionInfo":{"status":"ok","timestamp":1680471798686,"user_tz":-120,"elapsed":13,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["## Error Evaluation"],"metadata":{"id":"mDAcxnisooBg"}},{"cell_type":"code","source":["display(mismatch_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"Rlt3HUN5foAk","executionInfo":{"status":"ok","timestamp":1680471798686,"user_tz":-120,"elapsed":13,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"6903bbac-b921-4f70-919a-03807a468251"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["      sentence id                                            Text  \\\n","1               4  great vocal fresh tune crosscultural happiness   \n","10             58                         please dont waste money   \n","21             92                                    know painful   \n","22             93                                        greeting   \n","22             97                                        good bye   \n","...           ...                                             ...   \n","9973        46835                                           thank   \n","9973        46836                                           thank   \n","9994        46924                                            stop   \n","9996        46937      installation took several hour frustrating   \n","9996        46938                 clear instruction would helpful   \n","\n","     VADER Sentiment                   Auto Cross-Validated Sentiment  \\\n","1           positive                Sentiment analysis mismatch 0.275   \n","10          positive               Sentiment analysis mismatch 0.7621   \n","21          negative  Sentiment analysis mismatch 0.25959999999999994   \n","22          positive               Sentiment analysis mismatch 0.3818   \n","22          positive  Sentiment analysis mismatch 0.25959999999999994   \n","...              ...                                              ...   \n","9973        positive               Sentiment analysis mismatch 0.3612   \n","9973        positive               Sentiment analysis mismatch 0.3612   \n","9994        negative                Sentiment analysis mismatch 0.296   \n","9996        negative               Sentiment analysis mismatch 0.2404   \n","9996        positive               Sentiment analysis mismatch 0.5597   \n","\n","     TextBlob Sentiment  \n","1              positive  \n","10             negative  \n","21             negative  \n","22              neutral  \n","22             positive  \n","...                 ...  \n","9973            neutral  \n","9973            neutral  \n","9994            neutral  \n","9996           negative  \n","9996           positive  \n","\n","[1952 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-93b812d0-b9d5-4d5d-a5ea-283b7dd01426\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sentence id</th>\n","      <th>Text</th>\n","      <th>VADER Sentiment</th>\n","      <th>Auto Cross-Validated Sentiment</th>\n","      <th>TextBlob Sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>great vocal fresh tune crosscultural happiness</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.275</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>58</td>\n","      <td>please dont waste money</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.7621</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>92</td>\n","      <td>know painful</td>\n","      <td>negative</td>\n","      <td>Sentiment analysis mismatch 0.25959999999999994</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>93</td>\n","      <td>greeting</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.3818</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>97</td>\n","      <td>good bye</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.25959999999999994</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9973</th>\n","      <td>46835</td>\n","      <td>thank</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.3612</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9973</th>\n","      <td>46836</td>\n","      <td>thank</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.3612</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9994</th>\n","      <td>46924</td>\n","      <td>stop</td>\n","      <td>negative</td>\n","      <td>Sentiment analysis mismatch 0.296</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46937</td>\n","      <td>installation took several hour frustrating</td>\n","      <td>negative</td>\n","      <td>Sentiment analysis mismatch 0.2404</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>46938</td>\n","      <td>clear instruction would helpful</td>\n","      <td>positive</td>\n","      <td>Sentiment analysis mismatch 0.5597</td>\n","      <td>positive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1952 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93b812d0-b9d5-4d5d-a5ea-283b7dd01426')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-93b812d0-b9d5-4d5d-a5ea-283b7dd01426 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-93b812d0-b9d5-4d5d-a5ea-283b7dd01426');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","\n","vader_labels = new_train_df['VADER Sentiment'].tolist()\n","\n","textblob_labels = new_train_df['TextBlob Sentiment'].tolist()\n","print(len(vader_labels), len(textblob_labels))"],"metadata":{"id":"4w5vSzn_osYd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680471798686,"user_tz":-120,"elapsed":12,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"58a33e32-fb17-478f-94bf-156c212917aa"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["4772 4772\n"]}]},{"cell_type":"code","source":["from PIL import Image, ImageDraw, ImageFont\n","\n","report = (classification_report(textblob_labels, vader_labels))\n","print(report)\n","\n","file_path = '/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/Results/'\n","\n","with open(file_path+'label_analysis_report.txt', 'w') as f:\n","    f.write(report)\n","\n","# # convert text file to PNG image\n","img = Image.new('RGB', (800, 800), color='white')\n","font = ImageFont.truetype('/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/media/Roboto/Roboto-Black.ttf', 20)\n","draw = ImageDraw.Draw(img)\n","\n","with open(file_path+'label_analysis_report.txt', 'r') as f:\n","    y = 0\n","    for line in f.readlines():\n","        draw.text((10, y), line, fill='black', font=font)\n","        y += 20\n","\n","img.save(file_path+'label_analysis_report.png')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QKjChAIdudSd","executionInfo":{"status":"ok","timestamp":1680471800399,"user_tz":-120,"elapsed":1721,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"0b7c2b00-d9a4-4d55-ee71-393edfa310d5"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","    negative       0.60      0.63      0.61       798\n","     neutral       0.77      0.70      0.73      2180\n","    positive       0.72      0.78      0.75      1794\n","\n","    accuracy                           0.72      4772\n","   macro avg       0.70      0.70      0.70      4772\n","weighted avg       0.72      0.72      0.72      4772\n","\n"]}]},{"cell_type":"markdown","source":["We have chosen not to use our silver labels as we feel that they are not representative of our dataset as whole. This is because our sample is of 62 sentences but the entire training data is compramised of 2280 sentences."],"metadata":{"id":"3zw5U6X25nED"}},{"cell_type":"markdown","source":["## Train, Test Split"],"metadata":{"id":"eBJHqIA8qmZl"}},{"cell_type":"code","source":["%pip install simpletransformers"],"metadata":{"id":"ppwHBoKewYNz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680471837607,"user_tz":-120,"elapsed":37212,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"47869bae-1274-405e-9353-3573d988d902"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting simpletransformers\n","  Downloading simpletransformers-0.63.9-py3-none-any.whl (250 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m250.5/250.5 KB\u001b[0m \u001b[31m16.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scikit-learn in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (1.2.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (2.27.1)\n","Requirement already satisfied: tensorboard in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (2.12.0)\n","Requirement already satisfied: regex in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (2022.10.31)\n","Collecting tokenizers\n","  Downloading tokenizers-0.13.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.6/7.6 MB\u001b[0m \u001b[31m70.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (1.4.4)\n","Collecting datasets\n","  Downloading datasets-2.11.0-py3-none-any.whl (468 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m468.7/468.7 KB\u001b[0m \u001b[31m48.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting transformers>=4.6.0\n","  Downloading transformers-4.27.4-py3-none-any.whl (6.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.8/6.8 MB\u001b[0m \u001b[31m105.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting streamlit\n","  Downloading streamlit-1.20.0-py2.py3-none-any.whl (9.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.6/9.6 MB\u001b[0m \u001b[31m106.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting wandb>=0.10.32\n","  Downloading wandb-0.14.0-py3-none-any.whl (2.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m102.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting sentencepiece\n","  Downloading sentencepiece-0.1.97-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m84.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (1.22.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (1.10.1)\n","Requirement already satisfied: tqdm>=4.47.0 in /usr/local/lib/python3.9/dist-packages (from simpletransformers) (4.65.0)\n","Collecting seqeval\n","  Downloading seqeval-1.2.2.tar.gz (43 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.6/43.6 KB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from transformers>=4.6.0->simpletransformers) (23.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.9/dist-packages (from transformers>=4.6.0->simpletransformers) (6.0)\n","Collecting huggingface-hub<1.0,>=0.11.0\n","  Downloading huggingface_hub-0.13.3-py3-none-any.whl (199 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.8/199.8 KB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from transformers>=4.6.0->simpletransformers) (3.10.7)\n","Requirement already satisfied: Click!=8.0.0,>=7.0 in /usr/local/lib/python3.9/dist-packages (from wandb>=0.10.32->simpletransformers) (8.1.3)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.9/dist-packages (from wandb>=0.10.32->simpletransformers) (5.9.4)\n","Requirement already satisfied: appdirs>=1.4.3 in /usr/local/lib/python3.9/dist-packages (from wandb>=0.10.32->simpletransformers) (1.4.4)\n","Collecting sentry-sdk>=1.0.0\n","  Downloading sentry_sdk-1.18.0-py2.py3-none-any.whl (194 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.8/194.8 KB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: typing-extensions in /usr/local/lib/python3.9/dist-packages (from wandb>=0.10.32->simpletransformers) (4.5.0)\n","Collecting pathtools\n","  Downloading pathtools-0.1.2.tar.gz (11 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting docker-pycreds>=0.4.0\n","  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n","Requirement already satisfied: protobuf!=4.21.0,<5,>=3.15.0 in /usr/local/lib/python3.9/dist-packages (from wandb>=0.10.32->simpletransformers) (3.20.3)\n","Collecting setproctitle\n","  Downloading setproctitle-1.3.2-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30 kB)\n","Collecting GitPython!=3.1.29,>=1.0.0\n","  Downloading GitPython-3.1.31-py3-none-any.whl (184 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m184.3/184.3 KB\u001b[0m \u001b[31m27.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from wandb>=0.10.32->simpletransformers) (67.6.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->simpletransformers) (3.4)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->simpletransformers) (1.26.15)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests->simpletransformers) (2.0.12)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->simpletransformers) (2022.12.7)\n","Collecting aiohttp\n","  Downloading aiohttp-3.8.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m67.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting dill<0.3.7,>=0.3.0\n","  Downloading dill-0.3.6-py3-none-any.whl (110 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m110.5/110.5 KB\u001b[0m \u001b[31m17.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.9/dist-packages (from datasets->simpletransformers) (2023.3.0)\n","Collecting multiprocess\n","  Downloading multiprocess-0.70.14-py39-none-any.whl (132 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m132.9/132.9 KB\u001b[0m \u001b[31m17.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting responses<0.19\n","  Downloading responses-0.18.0-py3-none-any.whl (38 kB)\n","Requirement already satisfied: pyarrow>=8.0.0 in /usr/local/lib/python3.9/dist-packages (from datasets->simpletransformers) (9.0.0)\n","Collecting xxhash\n","  Downloading xxhash-3.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m212.2/212.2 KB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas->simpletransformers) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->simpletransformers) (2022.7.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from scikit-learn->simpletransformers) (1.1.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from scikit-learn->simpletransformers) (3.1.0)\n","Collecting validators>=0.2\n","  Downloading validators-0.20.0.tar.gz (30 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: tzlocal>=1.1 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (4.3)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (8.4.0)\n","Requirement already satisfied: cachetools>=4.0 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (5.3.0)\n","Requirement already satisfied: altair<5,>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (4.2.2)\n","Requirement already satisfied: tornado>=6.0.3 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (6.2)\n","Collecting pympler>=0.9\n","  Downloading Pympler-1.0.1-py3-none-any.whl (164 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m164.8/164.8 KB\u001b[0m \u001b[31m24.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (13.3.3)\n","Collecting pydeck>=0.1.dev5\n","  Downloading pydeck-0.8.0-py2.py3-none-any.whl (4.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m113.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting watchdog\n","  Downloading watchdog-3.0.0-py3-none-manylinux2014_x86_64.whl (82 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.1/82.1 KB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: toml in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (0.10.2)\n","Requirement already satisfied: importlib-metadata>=1.4 in /usr/local/lib/python3.9/dist-packages (from streamlit->simpletransformers) (6.1.0)\n","Collecting blinker>=1.0.0\n","  Downloading blinker-1.6-py3-none-any.whl (13 kB)\n","Collecting semver\n","  Downloading semver-3.0.0-py3-none-any.whl (17 kB)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (1.8.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (2.17.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (3.4.3)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (0.40.0)\n","Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (1.4.0)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (0.4.6)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (0.7.0)\n","Requirement already satisfied: grpcio>=1.48.2 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (1.53.0)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from tensorboard->simpletransformers) (2.2.3)\n","Requirement already satisfied: toolz in /usr/local/lib/python3.9/dist-packages (from altair<5,>=3.2.0->streamlit->simpletransformers) (0.12.0)\n","Requirement already satisfied: entrypoints in /usr/local/lib/python3.9/dist-packages (from altair<5,>=3.2.0->streamlit->simpletransformers) (0.4)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from altair<5,>=3.2.0->streamlit->simpletransformers) (3.1.2)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.9/dist-packages (from altair<5,>=3.2.0->streamlit->simpletransformers) (4.3.3)\n","Requirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.9/dist-packages (from docker-pycreds>=0.4.0->wandb>=0.10.32->simpletransformers) (1.16.0)\n","Collecting aiosignal>=1.1.2\n","  Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n","Collecting frozenlist>=1.1.1\n","  Downloading frozenlist-1.3.3-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (158 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m158.8/158.8 KB\u001b[0m \u001b[31m24.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp->datasets->simpletransformers) (22.2.0)\n","Collecting multidict<7.0,>=4.5\n","  Downloading multidict-6.0.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (114 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m114.2/114.2 KB\u001b[0m \u001b[31m17.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting async-timeout<5.0,>=4.0.0a3\n","  Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n","Collecting yarl<2.0,>=1.0\n","  Downloading yarl-1.8.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (264 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m264.6/264.6 KB\u001b[0m \u001b[31m34.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting gitdb<5,>=4.0.1\n","  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 KB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->simpletransformers) (1.3.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.9/dist-packages (from importlib-metadata>=1.4->streamlit->simpletransformers) (3.15.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.9/dist-packages (from rich>=10.11.0->streamlit->simpletransformers) (2.14.0)\n","Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in /usr/local/lib/python3.9/dist-packages (from rich>=10.11.0->streamlit->simpletransformers) (2.2.0)\n","Requirement already satisfied: pytz-deprecation-shim in /usr/local/lib/python3.9/dist-packages (from tzlocal>=1.1->streamlit->simpletransformers) (0.1.0.post0)\n","Requirement already satisfied: decorator>=3.4.0 in /usr/local/lib/python3.9/dist-packages (from validators>=0.2->streamlit->simpletransformers) (4.4.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.9/dist-packages (from werkzeug>=1.0.1->tensorboard->simpletransformers) (2.1.2)\n","Collecting smmap<6,>=3.0.1\n","  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n","Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.9/dist-packages (from jsonschema>=3.0->altair<5,>=3.2.0->streamlit->simpletransformers) (0.19.3)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.9/dist-packages (from markdown-it-py<3.0.0,>=2.2.0->rich>=10.11.0->streamlit->simpletransformers) (0.1.2)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.9/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->simpletransformers) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.9/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->simpletransformers) (3.2.2)\n","Requirement already satisfied: tzdata in /usr/local/lib/python3.9/dist-packages (from pytz-deprecation-shim->tzlocal>=1.1->streamlit->simpletransformers) (2023.3)\n","Building wheels for collected packages: seqeval, validators, pathtools\n","  Building wheel for seqeval (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for seqeval: filename=seqeval-1.2.2-py3-none-any.whl size=16180 sha256=237b7579b64cadfa22ea72f2b4ffc5b188a650fad5854e11f371da6a5e2beed2\n","  Stored in directory: /root/.cache/pip/wheels/e2/a5/92/2c80d1928733611c2747a9820e1324a6835524d9411510c142\n","  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for validators: filename=validators-0.20.0-py3-none-any.whl size=19579 sha256=a58e26a9f580d8579e80ac2471b68a9ed7199659cc89a9fc07c8ead62038dfbf\n","  Stored in directory: /root/.cache/pip/wheels/2d/f0/a8/1094fca7a7e5d0d12ff56e0c64675d72aa5cc81a5fc200e849\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pathtools: filename=pathtools-0.1.2-py3-none-any.whl size=8807 sha256=3c8701309179631ec1f2dea0b0fccfd5be2459d4588968ff42c1373fd8bab50f\n","  Stored in directory: /root/.cache/pip/wheels/b7/0a/67/ada2a22079218c75a88361c0782855cc72aebc4d18d0289d05\n","Successfully built seqeval validators pathtools\n","Installing collected packages: tokenizers, sentencepiece, pathtools, xxhash, watchdog, validators, smmap, setproctitle, sentry-sdk, semver, pympler, multidict, frozenlist, docker-pycreds, dill, blinker, async-timeout, yarl, responses, pydeck, multiprocess, huggingface-hub, gitdb, aiosignal, transformers, seqeval, GitPython, aiohttp, wandb, streamlit, datasets, simpletransformers\n","Successfully installed GitPython-3.1.31 aiohttp-3.8.4 aiosignal-1.3.1 async-timeout-4.0.2 blinker-1.6 datasets-2.11.0 dill-0.3.6 docker-pycreds-0.4.0 frozenlist-1.3.3 gitdb-4.0.10 huggingface-hub-0.13.3 multidict-6.0.4 multiprocess-0.70.14 pathtools-0.1.2 pydeck-0.8.0 pympler-1.0.1 responses-0.18.0 semver-3.0.0 sentencepiece-0.1.97 sentry-sdk-1.18.0 seqeval-1.2.2 setproctitle-1.3.2 simpletransformers-0.63.9 smmap-5.0.0 streamlit-1.20.0 tokenizers-0.13.2 transformers-4.27.4 validators-0.20.0 wandb-0.14.0 watchdog-3.0.0 xxhash-3.2.0 yarl-1.8.2\n"]}]},{"cell_type":"code","source":["from simpletransformers.classification import ClassificationModel, ClassificationArgs"],"metadata":{"id":"LFIYtME-0s6z","executionInfo":{"status":"ok","timestamp":1680471847738,"user_tz":-120,"elapsed":10143,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"rEL_4RaSWJcM","executionInfo":{"status":"ok","timestamp":1680471847739,"user_tz":-120,"elapsed":8,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["labels_map = {\"neutral\": 0, \"positive\": 1, \"negative\": 2}\n","\n","# Model configuration # https://simpletransformers.ai/docs/usage/#configuring-a-simple-transformers-model \n","model_args = ClassificationArgs()\n","model_args.labels_list=list(labels_map.keys())\n","model_args.labels_map=labels_map\n","\n","model_args.overwrite_output_dir=True # overwrite existing saved models in the same directory\n","model_args.evaluate_during_training=True # to perform evaluation while training the model\n","# (eval data should be passed to the training method)\n","\n","model_args.num_train_epochs=10 # number of epochs\n","model_args.train_batch_size=32 # batch size\n","model_args.learning_rate=4e-6 # learning rate\n","model_args.max_seq_length=256 # maximum sequence length\n","# Note! Increasing max_seq_len may provide better performance, but training time will increase. \n","# For educational purposes, we set max_seq_len to 256.\n","\n","# Early stopping to combat overfitting: https://simpletransformers.ai/docs/tips-and-tricks/#using-early-stopping\n","model_args.use_early_stopping=True\n","model_args.early_stopping_delta=0.01 # \"The improvement over best_eval_loss necessary to count as a better checkpoint\"\n","model_args.early_stopping_metric='eval_loss'\n","model_args.early_stopping_metric_minimize=True\n","model_args.early_stopping_patience=2\n","model_args.evaluate_during_training_steps=32 # how often you want to run validation in terms of training steps (or batches)"],"metadata":{"id":"T5RE4WFfWLrH","executionInfo":{"status":"ok","timestamp":1680471847739,"user_tz":-120,"elapsed":7,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["# Checking steps per epoch\n","steps_per_epoch = int(np.ceil(len(validated_data) / float(model_args.train_batch_size)))\n","print('Each epoch will have {:,} steps.'.format(steps_per_epoch)) # 64 steps = validating 2 times per epoch"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tO7b6I10WRFx","executionInfo":{"status":"ok","timestamp":1680471847739,"user_tz":-120,"elapsed":6,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"d4055436-c80f-4a04-b91d-601013810b91"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Each epoch will have 89 steps.\n"]}]},{"cell_type":"code","source":["validated_data = validated_data.drop(['VADER Sentiment', 'TextBlob Sentiment', 'sentence id'], axis=1)\n","validated_data.rename(columns={'Auto Cross-Validated Sentiment': 'Label'}, inplace=True)"],"metadata":{"id":"eMKurZ9nWTln","executionInfo":{"status":"ok","timestamp":1680471847740,"user_tz":-120,"elapsed":6,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["bert_train = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/datasets/train.csv', names = ['Rating', 'Title', 'Text'])"],"metadata":{"id":"WLr10-LEuiu-","executionInfo":{"status":"ok","timestamp":1680471881284,"user_tz":-120,"elapsed":33549,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["display(bert_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"Xihh0jeoyiGV","executionInfo":{"status":"ok","timestamp":1680471881285,"user_tz":-120,"elapsed":15,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"ee7d4311-fded-4573-cd33-c6c38b169273"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["         Rating                                  Title  \\\n","0             3                     more like funchuck   \n","1             5                              Inspiring   \n","2             5  The best soundtrack ever to anything.   \n","3             4                       Chrono Cross OST   \n","4             5                    Too good to be true   \n","...         ...                                    ...   \n","2999995       1                          Don't do it!!   \n","2999996       2          Looks nice, low functionality   \n","2999997       2             compact, but hard to clean   \n","2999998       3                         Hard to clean!   \n","2999999       1                     what is it saying?   \n","\n","                                                      Text  \n","0        Gave this to my dad for a gag gift after direc...  \n","1        I hope a lot of people hear this cd. We need m...  \n","2        I'm reading a lot of reviews saying that this ...  \n","3        The music of Yasunori Misuda is without questi...  \n","4        Probably the greatest soundtrack in history! U...  \n","...                                                    ...  \n","2999995  The high chair looks great when it first comes...  \n","2999996  I have used this highchair for 2 kids now and ...  \n","2999997  We have a small house, and really wanted two o...  \n","2999998  I agree with everyone else who says this chair...  \n","2999999  not sure what this book is supposed to be. It ...  \n","\n","[3000000 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-6e25f2fa-274e-47cc-a616-51b5a5d74366\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Rating</th>\n","      <th>Title</th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>more like funchuck</td>\n","      <td>Gave this to my dad for a gag gift after direc...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>Inspiring</td>\n","      <td>I hope a lot of people hear this cd. We need m...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>The best soundtrack ever to anything.</td>\n","      <td>I'm reading a lot of reviews saying that this ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Chrono Cross OST</td>\n","      <td>The music of Yasunori Misuda is without questi...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Too good to be true</td>\n","      <td>Probably the greatest soundtrack in history! U...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2999995</th>\n","      <td>1</td>\n","      <td>Don't do it!!</td>\n","      <td>The high chair looks great when it first comes...</td>\n","    </tr>\n","    <tr>\n","      <th>2999996</th>\n","      <td>2</td>\n","      <td>Looks nice, low functionality</td>\n","      <td>I have used this highchair for 2 kids now and ...</td>\n","    </tr>\n","    <tr>\n","      <th>2999997</th>\n","      <td>2</td>\n","      <td>compact, but hard to clean</td>\n","      <td>We have a small house, and really wanted two o...</td>\n","    </tr>\n","    <tr>\n","      <th>2999998</th>\n","      <td>3</td>\n","      <td>Hard to clean!</td>\n","      <td>I agree with everyone else who says this chair...</td>\n","    </tr>\n","    <tr>\n","      <th>2999999</th>\n","      <td>1</td>\n","      <td>what is it saying?</td>\n","      <td>not sure what this book is supposed to be. It ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3000000 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e25f2fa-274e-47cc-a616-51b5a5d74366')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6e25f2fa-274e-47cc-a616-51b5a5d74366 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6e25f2fa-274e-47cc-a616-51b5a5d74366');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from simpletransformers.classification import ClassificationModel\n","\n","test_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Text Mining/Project/datasets/sentiment-topic-final-test.tsv', sep='\\t')\n","\n","# train_data, dev = train_test_split(new_bert_train, test_size=0.2, random_state=0, stratify=validated_data[['Label']])\n","\n","# # Define the model\n","# model = ClassificationModel(\"bert\", \"huawei-noah/TinyBERT_General_4L_312D\", num_labels=3, args=model_args, use_cuda=True)"],"metadata":{"id":"GlV5FO3OWWAB","executionInfo":{"status":"ok","timestamp":1680471957788,"user_tz":-120,"elapsed":1564,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# # Tokenize the input data\n","# train_data[\"Text\"] = train_df[\"Text\"].apply(lambda x: x[:512])\n","# display(train_data[\"Text\"])\n","# train_data[\"tokenized_text\"] = train_data[\"Text\"].apply(lambda x: model.tokenizer.tokenize(x[0]))\n","# train_data[\"input_ids\"] = train_data[\"tokenized_text\"].apply(lambda x: model.tokenizer.convert_tokens_to_ids(x))\n","# train_data[\"input_ids\"] = train_data[\"input_ids\"].apply(lambda x: x[:512])\n","# train_data[\"attention_mask\"] = [\n","#      [int(i > 0) for i in ii] for ii in train_data[\"input_ids\"].values\n","# ]\n","\n","# # Define the training arguments\n","# train_args = {\n","#     \"reprocess_input_data\": True,\n","#     \"overwrite_output_dir\": True,\n","#     \"num_train_epochs\": 1,\n","#     \"learning_rate\": 1e-5,\n","#     \"train_batch_size\": 16,\n","#     \"gradient_accumulation_steps\": 2,\n","# }\n"],"metadata":{"id":"eJvzEG5gWYhh","executionInfo":{"status":"aborted","timestamp":1680471883593,"user_tz":-120,"elapsed":20,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# dev[\"Text\"] = dev[\"Text\"].apply(lambda x: x[:512])\n","# display(dev[\"Text\"])\n","# dev[\"tokenized_text\"] = dev[\"Text\"].apply(lambda x: model.tokenizer.tokenize(x))\n","# dev[\"input_ids\"] = dev[\"tokenized_text\"].apply(lambda x: model.tokenizer.convert_tokens_to_ids(x))\n","# dev[\"input_ids\"] = dev[\"input_ids\"].apply(lambda x: x[:512])\n","# dev[\"attention_mask\"] = [\n","#      [int(i > 0) for i in ii] for ii in dev[\"input_ids\"].values\n","# ]"],"metadata":{"id":"sh9t_2jcWbGF","executionInfo":{"status":"aborted","timestamp":1680471883593,"user_tz":-120,"elapsed":19,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# fine tuning model\n","\n","# _, history = model.train_model(train_data, eval_df=dev) "],"metadata":{"id":"lP2HR2REWeYA","executionInfo":{"status":"aborted","timestamp":1680471883594,"user_tz":-120,"elapsed":18,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Tokenize the test data\n","# test_data[\"text\"] = test_data[\"text\"].apply(lambda x: x[:512])\n","# test_data[\"tokenized_text\"] = test_data[\"text\"].apply(model.tokenizer.tokenize)\n","# test_data[\"input_ids\"] = test_data[\"tokenized_text\"].apply(\n","#     lambda x: model.tokenizer.convert_tokens_to_ids(x)\n","# )\n","# test_data[\"input_ids\"] = test_data[\"input_ids\"].apply(lambda x: x[:512])\n","# test_data[\"attention_mask\"] = [\n","#     [int(i > 0) for i in ii] for ii in test_data[\"input_ids\"].values\n","# ]"],"metadata":{"id":"hoooL3ewWgzu","executionInfo":{"status":"aborted","timestamp":1680471883594,"user_tz":-120,"elapsed":17,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# predictions, _ = model.predict(test_data['text'].tolist())\n"],"metadata":{"id":"-3x61D9IWjLr","executionInfo":{"status":"aborted","timestamp":1680471883594,"user_tz":-120,"elapsed":16,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Training and evaluation loss\n","# train_loss = history['train_loss']\n","# eval_loss = history['eval_loss']\n","# plt.plot(train_loss, label='Training loss')\n","# plt.plot(eval_loss, label='Evaluation loss')\n","# plt.title('Training and evaluation loss')\n","# plt.legend()"],"metadata":{"id":"w3B7l2_nWlun","executionInfo":{"status":"aborted","timestamp":1680471883595,"user_tz":-120,"elapsed":16,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Result\n","# print(classification_report(test_data['sentiment'], predictions))"],"metadata":{"id":"VHOkE1HBWoof","executionInfo":{"status":"aborted","timestamp":1680471883595,"user_tz":-120,"elapsed":16,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Logistic Regression"],"metadata":{"id":"fiJEXamYnEbl"}},{"cell_type":"code","source":["from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","from sklearn.linear_model import LogisticRegression\n","\n","reviews = validated_data.Text.values.tolist()\n","sentiment_labels = validated_data.Label.values.tolist()\n","X2_train, X2_test, y2_train, y2_test = train_test_split(reviews, sentiment_labels, test_size=0.2, random_state=42)\n","\n","vectorizer = TfidfVectorizer()\n","\n","X2_train = vectorizer.fit_transform(X2_train)\n","\n","X2_test = vectorizer.transform(X2_test)"],"metadata":{"id":"dFpZvPZunC7-","executionInfo":{"status":"ok","timestamp":1680471975972,"user_tz":-120,"elapsed":383,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["clf = LogisticRegression()\n","clf.fit(X2_train, y2_train)\n","y2_pred = clf.predict(X2_test)\n","\n","print(classification_report(y2_test, y2_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ExC2fO6ynR2J","executionInfo":{"status":"ok","timestamp":1680471979649,"user_tz":-120,"elapsed":4,"user":{"displayName":"Mylène Brown-Coleman","userId":"07195792022381780704"}},"outputId":"3f7fbc16-a074-44d9-f67a-8f2cc3c8f095"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","    negative       1.00      0.31      0.47        59\n","     neutral       0.80      0.99      0.89       348\n","    positive       0.96      0.70      0.81       157\n","\n","    accuracy                           0.84       564\n","   macro avg       0.92      0.67      0.72       564\n","weighted avg       0.87      0.84      0.82       564\n","\n"]}]},{"cell_type":"markdown","source":["## Support Vector Machine"],"metadata":{"id":"FBwDqCyxpiy1"}},{"cell_type":"code","source":["from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","from sklearn.linear_model import MultinomialNB\n","\n","reviews = validated_data.Text.values.tolist()\n","sentiment_labels = validated_data.Label.values.tolist()\n","X2_train, X2_test, y2_train, y2_test = train_test_split(reviews, sentiment_labels, test_size=0.2, random_state=42)\n","\n","vectorizer = TfidfVectorizer()\n","\n","X2_train = vectorizer.fit_transform(X2_train)\n","\n","X2_test = vectorizer.transform(X2_test)"],"metadata":{"id":"yYuoidvgpUBx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["clf = ogisticRegressionL()\n","clf.fit(X2_train, y2_train)\n","y2_pred = clf.predict(X2_test)\n","\n","print(classification_report(y2_test, y2_pred))"],"metadata":{"id":"R6KR4J0m65q4"},"execution_count":null,"outputs":[]}]}